name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  JAVA_VERSION: '17'
  MAVEN_VERSION: '3.9.6'

jobs:
  # Job de construcción y pruebas
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        cache: 'maven'
        
    - name: Cache Maven packages
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Validate POM
      run: mvn validate
      
    - name: Run tests
      run: mvn test
      
    - name: Run integration tests
      run: mvn verify -Dspring.profiles.active=test
      
    - name: Generate test report
      run: mvn jacoco:report
      
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: |
          target/surefire-reports/
          target/site/jacoco/
          
    - name: Build application
      run: mvn clean package -DskipTests
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: application-jar
        path: target/tournament-management-*.jar

  # Job de análisis de código
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        cache: 'maven'
        
    - name: Run SonarQube analysis
      run: mvn sonar:sonar
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        
    - name: Run dependency check
      run: mvn dependency:check
      
    - name: Run spotless check
      run: mvn spotless:check

  # Job de seguridad
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Job de construcción Docker
  docker-build:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [build-and-test, code-quality, security]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/tournament-management:latest
          ${{ secrets.DOCKER_USERNAME }}/tournament-management:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Job de notificación
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [build-and-test, code-quality, security, docker-build]
    if: always()
    
    steps:
    - name: Notify on failure
      if: failure()
      run: |
        echo "Pipeline failed! Check the logs for details."
        # Aquí se puede agregar notificación por Slack, email, etc.
        
    - name: Notify on success
      if: success()
      run: |
        echo "Pipeline completed successfully!"
        # Aquí se puede agregar notificación por Slack, email, etc. 